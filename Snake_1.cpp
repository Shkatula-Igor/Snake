#include <iostream>
#include <conio.h>                                   // Для считывания состояния клавиш клавиатуры
#include <Windows.h>                                 // Для того что бы срабатывала функция Sleep
#include <ctime>                                     // Для привязки рандомных чисел ко времени и получению псевдо рандомных значений

using namespace std;

bool gameOver;                                        // Переменная окончания игры
const int width = 40;                                 // Ширина игрового поля
const int height = 20;                                // Высота игрового поля
int x, y, score;                                      // Координаты головы змеи и переменная для подсчёта очков в игре
int fruitX, fruitY;                                   // Координаты фрукта
int tailX[100], tailY[100];                           // Для хранения координат хвоста по X и Y
int nTail;                                            // Количество элементов в хвосте
int speed = 600;                                      // Переменная отвечающая за скорость передвижения змейки
enum eDirection {STOP = 0, LEFT, RIGHT, UP, DOWN};    // Перечесление хронит элементы управления
eDirection dir;                                       // Переменная типа Перечесление
int p = 0;                                            // Переменная служит для проверки "о" в верхнем левом углу

void Setup()
{
	gameOver = false;
	dir = STOP;
	x = width / 2 - 1;
	y = height / 2 - 1;
	fruitX = rand() % width;            
	fruitY = rand() % height;

}

void Draw()
{
	system("cls");  // Очистка экрана
//-----------------------------------------------прорисовка верхней границы----------------------------
	for (int i = 0; i < width + 1; i++)
	{
		cout << "#";
	}
	cout << endl;
//------------------------------------------------Прорисовка боковых (левой и правой границы)----------
	for (int i = 0; i < height; i++)                  // i - это координата по Y
	{
		for (int j = 0; j < width; j++)               // j - это координата по X     
		{
			if (j == 0 || j == width - 1)             // Условие на прорисовку правой и левой границы
			{
				cout << "#";
            }
			

			if (i == fruitY && j == fruitX)                // Условие на прорисовку "F" фрукта
			{ 
				cout << "F";
			}
			else if (i == y && j == x)                     // Условие на прорисовку положения головы змеи
			{
				 cout << "@";
			}
			else
			{
				bool print = false;
				for (int k = 0; k < nTail; k++)
				{
					if (tailX[k] == j && tailY[k] == i)    // Условие на прорисовку хвоста змеи
					{ 
						if (p != 1)
						{
							print = true;
							cout << 'o';
							//cout << k << ";" << tailX[k] << ";" << tailY[k] << ";" << i;   //Вывод переменных для проверки при устраннении багов
						}
					}
				}
				
				if (!print)
				{
					cout << " ";
				}
				
			}
		}
		cout << endl;
	}
	


//--------------------------------------------------Прорисовка нижней границы--------------------------
	for (int i = 0; i < width + 1; i++)
	{
		cout << "#";
	}
	cout << endl;
	cout << "Score: " << score << endl;           // Выводит на экрат счёт игры
	cout << fruitX << ";" << fruitY;              // вывод координат появления фрукта для проверки попадания в поле игры
}
//-----------------------------------------------ФУНКЦИЯ ОТВЕЧАЮЩАЯ ЗА СЧИТЫВАНИЕ ДЕЙСТВИЙ (ШАГОВ) С КЛАВИАТУРЫ-------------------
void Input()
{
	if (_kbhit()) 
	{
		if (score != 0 )                       // Условие которое отвечает есть хвост у змеи или нет (проверяем наличие очков)
		{
			switch (_getch())                  // Считывание с клавиатуры команд для управления змейкой
			{
				case 'a':
				{
					if (dir != RIGHT)
					{
						dir = LEFT;
					}
				}
				break;
				case 'd':
				{
					if (dir != LEFT)
					{
						dir = RIGHT;
					}
				}
				break;
				case 'w':
				{
					if (dir != DOWN)
					{
						dir = UP;
					}
				}
				break;
				case 's':
				{
					if (dir != UP)
					{
						dir = DOWN;
					}
				}
				break;
				case 'x':
				{
					gameOver = true;                  // Выход из игры
				}
				break;
			}
		}
		else
		{
			switch (_getch())
			{
				case 'a':
					{
						dir = LEFT;
					}
				break;
				case 'd':
					{
						dir = RIGHT;
					}
				break;
				case 'w':
					{
						dir = UP;
					}
				break;
				case 's':
					{
						dir = DOWN;
					}
				break;
				case 'x':
				{
					gameOver = true;
				}
				break;
			}
		}
		
	}
}

//---------------------------------------------ФУНКЦИЯ ОТВЕЧАЮЩАЯ ЗА ЛОГИКУ ИГРЫ
void Logic() 
{
//---------------------------------------------Присвоение первоночальных значений-------------------------
	int prevX = tailX[0];      // prevX содержит предыдущее значени хвоста по X
	int prevY = tailY[0];      // prevY содержит предыдущее значени хвоста по Y
	
	int prev2X, prev2Y;        // Координаты нового элемента хвоста
	tailX[0] = x;              // Задаём координату по Х первого элемента хвоста
	tailY[0] = y;              // Задаём координату по Y первого элемента хвоста
	              

//-----------------------------------------------Построение хвоста змеи-----------------------------------
	for (int i = 1; i < nTail; i++)
	{
		prev2X = tailX[i];
		prev2Y = tailY[i];
		tailX[i] = prevX;
		tailY[i] = prevY;
		prevX = prev2X;
		prevY = prev2Y;
	}
//------------------------------------------------Передвижение змейки------------------------------------
	switch (dir)
	{
	case LEFT:
		x--;
		break;
	case RIGHT:
		x++;
		break;
	case UP:
		y--;
		break;
	case DOWN:
		y++;
		break;
	}
//----------------------------------------------------Проверка на выход за пределы границы---------------
	/*
	if (x > width-2 || x < 0 || y > height-1 || y < 0)   // услови при котором игра заканчивается если змея врезалась в стену игрового поля
	{
		gameOver = true;
	}
	*/

	if (x >= width - 1)
	{
		x = 0;
	}
	else if (x < 0)
	{
		x = width - 2;
	}

	if (y >= height)
	{
		y = 0;
	}
	else if (y < 0)
	{
		y = height - 1;
	}
//---------------------------------------------------Проверка на то что врезалась в свой хвост или нет---
	for (int i = 0; i < nTail; i++)
	{
		if (tailX[i] == x && tailY[i] == y)
		{
			gameOver = true;                       // Выход из игры
		}
	}
//---------------------------------------------------Проверка на то что попали на фрукт или нет----------
	p = 0;
	if (x == fruitX && y == fruitY)
	{
		score = score + 10;                //Добавляем очки 
		do
		{                                  
			fruitX = rand() % width;                                                         //Расчитываем новые координаты для фрукта по X
			fruitY = rand() % height;                                                        //Расчитываем новые координаты для фрукта по Y
		} while (fruitX < 1 || fruitX > width - 2 || fruitY < 1 || fruitY > height - 2);      //Ограничение на вхождение координат фрукта в игровое поле
		

		nTail++;                           //Увеличиваем размер хвоста змеи
		speed = speed - 25;                // Уменьшаем время задержки, тем самым увеличиваем скорость передвижения змеи
		
		p = 1;                             // Переменная служит для роверки, что бы не отрисовывался в углу "о" в первое прохождение цикла при отрисовке хвоста начиная со второго элемента хвоста
	}
//------------------------------------------------Увеличение скорости движения змейки----------------------

	if (speed <= 100)                      // Скорость не может быть с задержкой меньше 100 (своего рода ограничение по скорости)
	{
		speed = 100;
	}
}

int main()
{
	srand(time(NULL));
	Setup();                        // Задаём начальные параметры игры

	while (!gameOver)
	{
		Draw();                     // Прорисовка
		Input();                    // Ввод с клавиатуры
		Sleep(speed);               // Задержка
		Logic();                    // Логика игры
	}
	return 0;
}
